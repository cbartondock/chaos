# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_64 = Integer(64); _sage_const_0 = Integer(0); _sage_const_62 = Integer(62); _sage_const_500 = Integer(500); _sage_const_1 = Integer(1); _sage_const_p25 = RealNumber('.25'); _sage_const_1p = RealNumber('1.'); _sage_const_1000 = Integer(1000); _sage_const_0p6 = RealNumber('0.6'); _sage_const_0p9 = RealNumber('0.9'); _sage_const_30 = Integer(30); _sage_const_2p = RealNumber('2.')
import numpy
import matplotlib.pylab as plt
import matplotlib.cm as cm
import ctypes
import time
start=time.time()
LIB = '/Users/chrisdock/Documents/chaos/ccodefromsage/figurefactory/test.dylib'
doublify = lambda x: '0'*(_sage_const_64 -len(bin(x)[_sage_const_2 :]))+bin(x)[_sage_const_2 :]
maxiter = _sage_const_30 
numsamples = _sage_const_1000 
grid= _sage_const_500 
mul=_sage_const_2 
print "grid: "+str(grid)+", numsamples: "+str(numsamples)+", maxiter: "+str(maxiter)
"""
ymin=0
ymax=2*N(pi)
xmin=0
xmax=2*N(pi)
"""
ymin = -_sage_const_2 
ymax = _sage_const_2 
xmin = -_sage_const_2 
xmax = _sage_const_2 
"""
ymin=-2.8
ymax=1.8
xmin=-1.8
xmax=2.8
"""
deltax = (xmax-xmin)/grid
deltay = (ymax-ymin)/grid

X = ctypes.CDLL(LIB)
m = matrix.ones(grid,grid)
m = m.numpy('uint64')
m = numpy.multiply(_sage_const_2 , m)

h = matrix.zero(mul*grid,mul*grid);
h = h.numpy('uint64');
b = [[_sage_const_0  for i in range(_sage_const_0 ,grid)] for j in range(_sage_const_0 ,grid)]
for i in range(_sage_const_0 ,grid):
    for j in range(_sage_const_0 ,grid):
        if i==_sage_const_0  or j==_sage_const_0  or i==grid-_sage_const_1  or j==grid-_sage_const_1 :
            b[i][j]=_sage_const_1 
x3 = numpy.vectorize(lambda x:int(x)/_sage_const_1p )(b)
x3 = numpy.ma.masked_where(x3 <_sage_const_0p9 ,x3)
print "started c"
X.forward(ctypes.c_int32(mul),
       ctypes.c_int32(maxiter),
       ctypes.c_int32(maxiter),
	   ctypes.c_int32(numsamples),
       ctypes.c_int32(grid),
       ctypes.c_int32(grid),
	   ctypes.c_double(xmin),
	   ctypes.c_double(ymin),
	   ctypes.c_double(deltax),
       ctypes.c_double(deltay),
	   m.ctypes.data_as(ctypes.c_void_p),
       h.ctypes.data_as(ctypes.c_void_p))
print "finished c"
for i in range(_sage_const_0 ,_sage_const_62 ):
    print(i)
    m2=map(lambda r: map( lambda e: doublify(e)[i],r), m)
    x = numpy.vectorize(lambda x: _sage_const_p25 +int(x)/_sage_const_2p )(m2)
    plt.axis('on')
    imgplot = plt.imshow(x,vmin=_sage_const_0 , vmax=_sage_const_1 ,interpolation='nearest',cmap=cm.Blues,extent=[xmin,xmax,ymin,ymax])
    plt.savefig("henonfigs/result_"+str(i)+".png")
    plt.axis('off')
    h2= map(lambda r: map(lambda e: doublify(e)[i],r),h)
    x2 = numpy.vectorize(lambda x: int(x)/_sage_const_1p )(h2)
    x2 = numpy.ma.masked_where(x2 <_sage_const_0p9 ,x2)
    imgplot3=plt.imshow(x3,vmin=_sage_const_0 ,vmax=_sage_const_1 ,interpolation='nearest',cmap=cm.Greys,extent= [xmin,xmax,ymin,ymax])
    imgplot2=plt.imshow(x2,vmin=_sage_const_0 , vmax=_sage_const_1 ,interpolation='nearest',cmap=cm.Greens,extent=[xmin*mul,xmax*mul,ymin*mul,ymax*mul],alpha=_sage_const_0p6 )
    plt.savefig("henondiffs/diff_"+str(i)+".png")
    plt.clf()
end=time.time()
print "total time: "+str(end-start)


