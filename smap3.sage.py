# This file was *autogenerated* from the file smap3.sage
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2p5 = RealNumber('2.5'); _sage_const_5 = Integer(5); _sage_const_8 = Integer(8); _sage_const_50p = RealNumber('50.'); _sage_const_p3 = RealNumber('.3'); _sage_const_3p14 = RealNumber('3.14'); _sage_const_100000 = Integer(100000)
import time
from collections import Counter
from random import random as rand
import matplotlib.pyplot as plt
def rmod(x, y):
    return x - int(x/y)*y

#map generator
def smap_g(rho):
    def smap(p):
        x = rmod(p[_sage_const_0 ]+p[_sage_const_1 ],_sage_const_2 *N(pi))
        y = p[_sage_const_1 ] + rho*sin(p[_sage_const_0 ]+p[_sage_const_1 ])
        return [x,y]
    return smap

#point picker
def pickpoint(xmin,xmax,ymin,ymax):
   return [rand()*(xmax-xmin)+xmin,rand()*(ymax-ymin)+ymin]
def pickn(n,xmin,xmax,ymin,ymax):
    result=[]
    for i in range(_sage_const_0 ,n):
        result.append(pickpoint(xmin,xmax,ymin,ymax))
    return result

mysmap = smap_g(_sage_const_1 )

testmap = lambda p: [_sage_const_5 *p[_sage_const_0 ],_sage_const_p3 *p[_sage_const_1 ]]
testmap2 = lambda p: [p[_sage_const_0 ]+cos(_sage_const_3p14 *(p[_sage_const_0 ]+_sage_const_1 )),_sage_const_p3 *p[_sage_const_1 ]]
xmin=-_sage_const_2p5 
xmax=_sage_const_2p5 
ymin=-_sage_const_2p5 
ymax=_sage_const_2p5 


def alg3(xmin,xmax,ymin,ymax,grid,smap,n,numpoints):
    plt.axes()
    deltax= (xmax-xmin)/grid
    deltay= (ymax-ymin)/grid
    points = pickn(numpoints, xmin, xmax, ymin, ymax)
    for i in range(_sage_const_0 ,n):
        points = [smap(p) for p in points]
    y=ymin
    recs=[]
    i=_sage_const_0 
    cnt = Counter()
    for p in points:
        cnt[(floor(p[_sage_const_0 ]/deltax),floor(p[_sage_const_1 ]/deltay))]+=_sage_const_1 
    while y<ymax:
        x=xmin
        while x<xmax:
            print(i)
            i+=_sage_const_1 
            rectangle= plt.Rectangle((x,y),deltax,deltay,fc='g')
            plt.gca().add_patch(rectangle)
            if cnt[(floor(x/deltax),floor(y/deltay))]>_sage_const_0 :
                rectangle= plt.Rectangle((x,y),deltax,deltay,fc='b')
                plt.gca().add_patch(rectangle)
            x+=deltax
        y+=deltay
    plt.axis('scaled')
    plt.ylim([-_sage_const_2 ,_sage_const_2 ])
    plt.xlim([-_sage_const_2 ,_sage_const_2 ])
    plt.savefig("alg3_result.png")
print "calling"
alg3(xmin,xmax,ymin,ymax,_sage_const_50p ,mysmap,_sage_const_8 ,_sage_const_100000 )
