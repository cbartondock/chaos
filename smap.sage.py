# This file was *autogenerated* from the file smap.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_p88 = RealNumber('.88'); _sage_const_p01 = RealNumber('.01'); _sage_const_p5 = RealNumber('.5'); _sage_const_10 = Integer(10); _sage_const_p23 = RealNumber('.23'); _sage_const_p1 = RealNumber('.1'); _sage_const_p3 = RealNumber('.3'); _sage_const_0p5 = RealNumber('0.5')
import time
from random import random as rand
import matplotlib.pyplot as plt
def rmod(x, y):
    return x - int(x/y)*y

#map generator
def smap_g(rho):
    def smap(p):
        x = rmod(p[_sage_const_0 ]+p[_sage_const_1 ],_sage_const_2 *N(pi))
        y = p[_sage_const_1 ] + rho*sin(p[_sage_const_0 ]+p[_sage_const_1 ])
        return [x,y]
    return smap

#point picker
def pickpoint(xmin,xmax,ymin,ymax):
   return [rand()*(xmax-xmin)+xmin,rand()*(ymax-ymin)+ymin]
def pickn(n,xmin,xmax,ymin,ymax):
    result=[]
    for i in range(_sage_const_0 ,n):
        result.append(pickpoint(xmin,xmax,ymin,ymax))
    return result

mysmap = smap_g(_sage_const_1 )

testmap = lambda p: [_sage_const_5 *p[_sage_const_0 ],_sage_const_p3 *p[_sage_const_1 ]]
print(testmap([_sage_const_3 ,_sage_const_10 ]))
xmin=-_sage_const_2 
xmax=_sage_const_2 
ymin=-_sage_const_p88 
ymax=_sage_const_p23 
eps=_sage_const_p1 

def alg(xmin,xmax,ymin,ymax,eps, n,numpoints,smap):
    if n==_sage_const_0 :
        return [[xmin,xmax,ymin,ymax]]
    print(n)
    pointsup = pickn(numpoints,xmin,xmax,ymax,ymax+eps)
    pointsdown = pickn(numpoints,xmin,xmax,ymin-eps,ymin)
    pointsright = pickn(numpoints,xmax,xmax+eps,ymin,ymax)
    pointsleft = pickn(numpoints, xmin-eps,xmin,ymin,ymax)
    
    pointsup = [smap(p) for p in pointsup]
    pointsdown = [smap(p) for p in pointsdown]
    pointsright = [smap(p) for p in pointsright]
    pointsleft = [smap(p) for p in pointsleft]
    
    vdegree=_sage_const_0 

    for p in pointsup:
        if p[_sage_const_1 ]<ymax and p[_sage_const_1 ]>=ymin and p[_sage_const_0 ]<xmax and p[_sage_const_0 ]>=xmin:
            vdegree+=_sage_const_1 
            break
    for p in pointsdown:
        if p[_sage_const_1 ]<ymax and p[_sage_const_1 ]>=ymin and p[_sage_const_0 ]<xmax and p[_sage_const_0 ]>=xmin:
            vdegree+=_sage_const_1 
            break
    for p in pointsright:
        if p[_sage_const_1 ]<ymax and p[_sage_const_1 ]>=ymin and p[_sage_const_0 ]<xmax and p[_sage_const_0 ]>=xmin:
            vdegree+=_sage_const_1 
            break
    for p in pointsleft:
        if p[_sage_const_1 ]<ymax and p[_sage_const_1 ]>=ymin and p[_sage_const_0 ]<xmax and p[_sage_const_0 ]>=xmin:
            vdegree+=_sage_const_1 
            break

    if vdegree >=_sage_const_2 :
        return alg(xmin,_sage_const_0p5 *(xmin+xmax),ymin,_sage_const_0p5 *(ymin+ymax),eps,n-_sage_const_1 ,numpoints,smap) + alg(_sage_const_p5 *(xmin+xmax),xmax,ymin, _sage_const_0p5 *(ymin+ymax),eps,n-_sage_const_1 ,numpoints,smap)+alg(xmin,_sage_const_0p5 *(xmax+xmax),_sage_const_0p5 *(ymin+ymax),ymax,eps,n-_sage_const_1 ,numpoints,smap) + alg(_sage_const_0p5 *(xmin+xmax),xmax,_sage_const_0p5 *(ymax+ymin),ymax,eps,n-_sage_const_1 ,numpoints,smap)
    else:
        return []



result=alg(xmin,xmax,ymin,ymax,_sage_const_p1 ,_sage_const_5 ,_sage_const_10 ,testmap)
print(result)

plt.axes()
domain = plt.Rectangle((xmin,ymin),xmax-xmin,ymax-ymin,fc='r')
plt.gca().add_patch(domain)
for r in result:
    rectangle = plt.Rectangle((r[_sage_const_0 ],r[_sage_const_2 ]),r[_sage_const_1 ]-r[_sage_const_0 ],r[_sage_const_3 ]-r[_sage_const_2 ],fc='b')
    plt.gca().add_patch(rectangle)
circle = plt.Circle((_sage_const_0 ,_sage_const_0 ),_sage_const_p01 ,fc='y')
plt.gca().add_patch(circle)
plt.axis('scaled')
plt.savefig('/Users/chrisdock/Desktop/foo.png')




